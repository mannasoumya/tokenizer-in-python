C_lang = {
    "("       : "Open Paren",
    ")"       : "Close Paren",
    "{"       : "Open Curly",
    "}"       : "Close Curly",
    "["       : "Open Bracket",
    "]"       : "Close Bracket",
    "#"       : "Include Directive",
    "<"       : "Open Angle",
    ">"       : "Close Angle",
    "="       : "Equals",
    ","       : "Comma",
    ";"       : "Semi-Colon",
    "include" : "Keyword",
    "int"     : "Data Type",
    "for"     : "Keyword",
    "return"  : "Keyword",
    "break"   : "Keyword",
    "if"      : "Keyword",
    "switch"  : "Keyword",
    "case"    : "Keyword",
    "struct"  : "Keyword",
    "!"       : "Keyword",
    "||"      : "Or Operator",
    "%"       : "Modulus Operator",
    "/"       : "Forward Slash",
    "\\"      : "Backward Slash",
    ":"       : "Colon",
}

Python_lang = {
    "False"    : "Keyword",
    "await"    : "Keyword",
    "else"     : "Keyword",
    "import"   : "Keyword",
    "pass"     : "Keyword",
    "None"     : "Keyword",
    "break"    : "Keyword",
    "except"   : "Keyword",
    "in"       : "Keyword",
    "raise"    : "Keyword",
    "True"     : "Keyword",
    "class"    : "Keyword",
    "finally"  : "Keyword",
    "is"       : "Keyword",
    "return"   : "Keyword",
    "and"      : "Keyword",
    "continue" : "Keyword",
    "for"      : "Keyword",
    "lambda"   : "Keyword",
    "try"      : "Keyword",
    "as"       : "Keyword",
    "def"      : "Keyword",
    "from"     : "Keyword",
    "nonlocal" : "Keyword",
    "while"    : "Keyword",
    "assert"   : "Keyword",
    "del"      : "Keyword",
    "global"   : "Keyword",
    "not"      : "Keyword",
    "with"     : "Keyword",
    "async"    : "Keyword",
    "elif"     : "Keyword",
    "if"       : "Keyword",
    "or"       : "Keyword",
    "yield"    : "Keyword",
    "and"      : "Operator",
    "or"       : "Operator",
    "not"      : "Operator",
    "is"       : "Operator",
    "in"       : "Operator",
    ">"        : "Operator",
    "<"        : "Operator",
    "+"        : "Operator",
    "-"        : "Operator",
    "*"        : "Operator",
    ","        : "Comma",
    "="        : "Equals",
    "("        : "Open Paren",
    ")"        : "Close Paren",
    "{"        : "Open Curly",
    "}"        : "Close Curly",
    "["        : "Open Bracket",
    "]"        : "Close Bracket",
    "%"        : "Modulus Operator",
    "/"        : "Forward Slash",
    "\\"       : "Backward Slash",
    ":"        : "Colon",
    "int"      : "Cast",
    "float"    : "Cast",
    "\""       : "String Identifier",
    "|"        : "Bitwise or",
    "&"        : "Bitwise and"
}
